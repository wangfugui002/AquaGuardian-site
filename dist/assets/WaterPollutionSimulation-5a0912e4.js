import{_ as Ee,i,G as st,o as x,c as I,a as l,u as ve,t as F,z,q as w,B as it,F as rt,A as ct,y as O,x as ye,p as ie,T,l as nt,m as pt,r as Ne,b as Se,w as _e,d as ht,e as bt,f as Lt,g as St,h as Ct,j as Ue,k as kt,s as Ae,M as at,C as Pt}from"./index-cd00da37.js";import{_ as Mt}from"./返回 (2)-4856710b.js";const wt={name:"LakePollutionSimulation",props:{map:{type:Object,required:!0},"water-areas-layer":{type:Object,required:!0}},emits:["simulation-update","close"],setup(n,{emit:e}){const k=i(!0),t=i(null),R=i(""),_=i(null),o=i([]),P=i(null),V=i(null),d=i("organic"),Q=i(1e3),X=i(.1),ce=[{value:"organic",label:"有机污染物"},{value:"inorganic",label:"无机污染物"},{value:"heavy_metal",label:"重金属"},{value:"nutrient",label:"营养盐"},{value:"pesticide",label:"农药"}],te=i(1),le=i(.005),oe=i(.002),ne=i(.05),v=i(.025),ae=i(25),me=i(2),se=i(5),$=i(!1),W=i(!1),p=i(!1),r=i(0),q=i(""),Y=i(null),E=i(0),A=i([]),G=i(""),Z=i(0),U=i(!1),j=i(null),ee=i(500),ue=i(.2),N=i(null),B=i(null),ge=i(null),re=i(null),Ge=()=>{k.value=!1,e("close")},Ce=()=>{const s={organic:{mass:2e3,decay:.15},inorganic:{mass:1500,decay:.08},heavy_metal:{mass:500,decay:.002},nutrient:{mass:3e3,decay:.25},pesticide:{mass:200,decay:.05}}[d.value];s&&(Q.value=s.mass,X.value=s.decay)},je=a=>{a&&(console.log("选择湖泊:",a.properties),u(),t.value=a.properties.osm_id||a.properties.OSM_ID||a.properties.id,R.value=a.properties.name||a.properties.NAME||"未命名湖泊",_.value=a,ge.value=a.geometry,re.value=T.geoJSON(a).getBounds(),Ve(a),ke(),Ie())},Ie=()=>{console.log("设置污染源选择模式"),n.map._pollutionSourceClickHandler&&(console.log("移除之前的事件监听器"),n.map.off("click",n.map._pollutionSourceClickHandler)),n.map._pollutionSourceClickHandler=a=>{console.log("地图被点击:",a.latlng);const s=a.latlng;fe(s)?(console.log("点击位置在湖泊内，设置污染源"),Pe(s)):(console.log("点击位置在湖泊外"),alert("请点击湖泊内的位置来设置污染源！"))},n.map.on("click",n.map._pollutionSourceClickHandler),console.log("污染源选择事件监听器已添加")},Re=()=>{t.value=null,R.value="",_.value=null,ge.value=null,re.value=null,ke(),N.value&&n.map.hasLayer(N.value)&&n.map.removeLayer(N.value),u()},ke=()=>{P.value=null,V.value&&n.map.hasLayer(V.value)&&n.map.removeLayer(V.value)},Pe=a=>{console.log("开始设置污染源位置:",a),ke(),P.value=a,console.log("污染源位置已设置:",P.value),V.value=T.circleMarker(a,{radius:3,fillColor:"#e74c3c",color:"#c0392b",weight:1,opacity:.8,fillOpacity:.8}),V.value.bindPopup(`
        <strong>污染源位置</strong><br>
        纬度: ${a.lat.toFixed(6)}<br>
        经度: ${a.lng.toFixed(6)}
      `),n.map.addLayer(V.value),console.log("污染源标记已添加到地图")},Ve=a=>{N.value&&n.map.hasLayer(N.value)&&n.map.removeLayer(N.value),N.value=T.geoJSON(a,{style:{fillColor:"#ff6b6b",weight:2,opacity:1,color:"#ff4757",fillOpacity:.3}}),n.map.addLayer(N.value),n.map.fitBounds(re.value)},He=async()=>{if(!ge.value){alert("请先选择湖泊");return}console.log("开始生成网格，湖泊几何:",ge.value),console.log("湖泊边界:",re.value),$.value=!0,r.value=0,q.value="正在生成网格...";try{const a=Fe();if(console.log("生成的网格点数量:",a.length),a.length===0){alert("未生成任何网格点，请检查湖泊几何数据"),$.value=!1;return}Be(a),p.value=!0,r.value=100,q.value="网格生成完成",setTimeout(()=>{$.value=!1},1e3)}catch(a){console.error("生成网格失败:",a),alert("生成网格失败: "+a.message),$.value=!1}},Fe=()=>{const a=[],s=re.value;console.log("生成网格点，边界:",s);const m=s.getSouth(),c=s.getNorth(),S=s.getWest(),g=s.getEast();console.log("网格范围:",{minLat:m,maxLat:c,minLng:S,maxLng:g});const h=ae.value/111e3,f=ae.value/(111e3*Math.cos((m+c)/2*Math.PI/180));console.log("网格步长:",{latStep:h,lngStep:f,gridSpacing:ae.value});let C=0,b=0;for(let y=m;y<=c;y+=h)for(let M=S;M<=g;M+=f){C++;const D=T.latLng(y,M);fe(D)&&(b++,a.push({lat:y,lng:M,x:(M-S)*111e3*Math.cos(y*Math.PI/180),y:(y-m)*111e3,concentrations:[]}))}return console.log(`网格生成完成: 总点数 ${C}, 有效点数 ${b}`),a},fe=a=>{try{return re.value&&!re.value.contains(a)?!1:ge.value?T.geoJSON(ge.value).getLayers().some(S=>S instanceof T.Polygon?Me(a,S.getLatLngs()[0]):!1):re.value?re.value.contains(a):!1}catch(s){return console.error("检查点是否在湖泊内时出错:",s),!1}},Me=(a,s)=>{try{const m=a.lng,c=a.lat;let S=!1;for(let g=0,h=s.length-1;g<s.length;h=g++){const f=s[g].lng,C=s[g].lat,b=s[h].lng,y=s[h].lat;C>c!=y>c&&m<(b-f)*(c-C)/(y-C)+f&&(S=!S)}return S}catch(m){return console.error("射线法计算出错:",m),!1}},Be=a=>{B.value&&n.map.hasLayer(B.value)&&n.map.removeLayer(B.value),B.value=T.layerGroup(),a.forEach((s,m)=>{const c=T.latLng(s.lat,s.lng);if(fe(c)){const S=T.circleMarker([s.lat,s.lng],{radius:2,fillColor:"#3498db",color:"#2980b9",weight:.5,opacity:.6,fillOpacity:.4});S.bindPopup(`网格点 ${m+1}<br>坐标: ${s.lat.toFixed(6)}, ${s.lng.toFixed(6)}`),B.value.addLayer(S)}}),n.map.addLayer(B.value)},qe=async()=>{if(!p.value){alert("请先生成网格");return}W.value=!0,r.value=0,q.value="正在计算扩散...";try{console.log("开始创建扩散模型，参数:",{Ex:ne.value,Ey:v.value,vx:le.value,vy:oe.value,H:te.value,K1:X.value/(24*3600),m:Q.value*1e3});const a=new xt(ne.value,v.value,le.value,oe.value,te.value,X.value/(24*3600),Q.value*1e3);console.log("扩散模型创建成功"),N.value&&n.map.hasLayer(N.value)&&(console.log("隐藏湖泊边界高亮图层"),n.map.removeLayer(N.value)),B.value&&n.map.hasLayer(B.value)&&(console.log("隐藏网格点图层"),n.map.removeLayer(B.value)),B.value=T.layerGroup(),n.map.addLayer(B.value);const s=me.value*60,m=Math.floor(s/se.value);A.value=[];for(let f=0;f<=m;f++)A.value.push(f*se.value);const c=P.value.lat,S=P.value.lng,g=Fe().map(f=>{const C=f.lat-c,y=(f.lng-S)*111e3*Math.cos(c*Math.PI/180),M=C*111e3;return{lat:f.lat,lng:f.lng,x:y,y:M,concentrations:[]}});console.log("开始计算扩散，网格点数:",g.length,"时间步数:",A.value.length);const h=Math.max(1,Math.floor(A.value.length/50));for(let f=0;f<A.value.length;f+=h){const C=A.value[f]*60;f%(h*5)===0&&console.log(`计算进度: ${f}/${A.value.length}`);for(let b=0;b<g.length;b++)try{const y=g[b],M=T.latLng(y.lat,y.lng);if(!fe(M)){y.concentrations.push(0);continue}if(Math.sqrt(y.x*y.x+y.y*y.y)>400){y.concentrations.push(0);continue}const H=a.calculateEnhanced(C,y.x,y.y);y.concentrations.push(H)}catch(y){console.error(`计算网格点 ${b} 浓度时出错:`,y),point.concentrations.push(0)}r.value=Math.round((f+1)/A.value.length*100),f%(h*10)===0&&await new Promise(b=>setTimeout(b,10))}for(let f=0;f<A.value.length;f++)if(f%h!==0){const C=Math.floor(f/h)*h,b=Math.min(C+h,A.value.length-1);for(let y=0;y<g.length;y++){const M=g[y],D=T.latLng(M.lat,M.lng);if(!fe(D)){g[y].concentrations[f]=0;continue}const H=g[y].concentrations[Math.floor(f/h)]||0,J=g[y].concentrations[Math.min(Math.floor(f/h)+1,g[y].concentrations.length-1)]||0,K=f%h/h,de=H*(1-K)+J*K;g[y].concentrations[f]=de}}Y.value={gridPoints:g,timeSteps:A.value,maxConcentration:Math.max(...g.flatMap(f=>f.concentrations))},Z.value=Y.value.maxConcentration,E.value=0,G.value=be(A.value[0]),pe(0),r.value=100,q.value="模拟计算完成",setTimeout(()=>{W.value=!1},1e3)}catch(a){console.error("模拟计算失败:",a),alert("模拟计算失败"),W.value=!1}},pe=a=>{if(!Y.value)return;const s=A.value[a],m=Y.value.gridPoints;B.value.clearLayers(),m.forEach((c,S)=>{const g=c.concentrations[a],h=T.latLng(c.lat,c.lng);if(g>.001&&fe(h)){const f=he(g,Z.value),C=T.circleMarker([c.lat,c.lng],{radius:3,fillColor:f,color:f,weight:1,opacity:.7,fillOpacity:Math.min(.8,g/Z.value*.7+.1)});C.bindPopup(`
            网格点 ${S+1}<br>
            坐标: ${c.lat.toFixed(6)}, ${c.lng.toFixed(6)}<br>
            时间: ${be(s)}<br>
            浓度: ${g.toFixed(6)} mg/L
          `),B.value.addLayer(C)}})},he=(a,s)=>{if(a<=0)return"#3498db";const m=a/s;return m>=.4?"#8e44ad":m>=.25?"#e74c3c":m>=.15?"#e67e22":m>=.06?"#f1c40f":m>=.015?"#2ecc71":"#3498db"},be=a=>{const s=Math.floor(a/60),m=a%60;return`${s.toString().padStart(2,"0")}:${m.toString().padStart(2,"0")}`},Je=()=>{U.value?Le():Oe()},we=a=>{ue.value=a,ee.value=Math.round(100/a),U.value&&(Le(),Oe())},Oe=()=>{!Y.value||A.value.length===0||(U.value=!0,j.value=setInterval(()=>{E.value>=A.value.length-1?E.value=0:E.value++,G.value=be(A.value[E.value]),pe(E.value)},ee.value))},Le=()=>{U.value=!1,j.value&&(clearInterval(j.value),j.value=null)},We=()=>{Le(),E.value=0,G.value=be(A.value[0]),pe(0)},De=a=>{const s=parseInt(a.target.value);E.value=s,G.value=be(A.value[s]),pe(s)},u=()=>{Le(),Y.value=null,E.value=0,A.value=[],B.value&&n.map.hasLayer(B.value)&&n.map.removeLayer(B.value),N.value&&n.map.hasLayer(N.value)&&n.map.removeLayer(N.value),p.value=!1},L=()=>{if(n["water-areas-layer"]){const a=n["water-areas-layer"].toGeoJSON().features;o.value=a.map((s,m)=>({id:s.properties.osm_id||s.properties.OSM_ID||m+1,name:s.properties.name||s.properties.NAME||`湖泊${m+1}`}))}};return st(()=>n["water-areas-layer"],()=>{L()},{immediate:!0}),Ce(),{panelVisible:k,selectedLake:t,selectedLakeName:R,lakeOptions:o,pollutionSourcePosition:P,pollutantType:d,pollutantMass:Q,decayRate:X,pollutantOptions:ce,lakeDepth:te,longitudinalVelocity:le,transverseVelocity:oe,longitudinalDiffusion:ne,transverseDiffusion:v,gridSpacing:ae,simulationHours:me,timeStep:se,gridLoading:$,simulationLoading:W,gridGenerated:p,progressPercentage:r,progressText:q,simulationResult:Y,currentTimeIndex:E,timeSteps:A,currentTimeDisplay:G,maxConcentration:Z,isPlaying:U,speedMultiplier:ue,togglePanel:Ge,onPollutantChange:Ce,onLakeSelect:je,clearLakeSelection:Re,clearPollutionSource:ke,generateGrid:He,startSimulation:qe,clearSimulation:u,togglePlayPause:Je,resetAnimation:We,changeSpeed:we,onTimeChange:De}}};class xt{constructor(e,k,t,R,_,o,P){this.Ex=e,this.Ey=k,this.vx=t,this.vy=R,this.H=_,this.K1=o,this.m=P,this.constant=P/(2*Math.PI*_*Math.sqrt(e*k))}calculate(e,k,t){if(e<=0)return 0;try{if(e<.001||this.Ex<=0||this.Ey<=0)return 0;const R=this.constant/(e*Math.sqrt(e)),_=Math.pow(k-this.vx*e,2)/(4*this.Ex*e),o=Math.pow(t-this.vy*e,2)/(4*this.Ey*e),V=Math.exp(-this.K1*e)*R*Math.exp(-_-o);if(isNaN(V)||!isFinite(V))return 0;const d=Math.round(V*1e6)/1e6;return d<1e-6?0:d}catch(R){return console.error("基础扩散计算出错:",R,{t:e,x:k,y:t}),0}}calculateEnhanced(e,k,t){if(e<=0)return 0;try{const R=this.calculate(e,k,t),_=Math.sqrt(k*k+t*t);if(_<150){const o=Math.exp(-_/80),P=R*(1+o*3);return isNaN(P)||!isFinite(P)?R:P}return R}catch(R){return console.error("计算增强浓度时出错:",R,{t:e,x:k,y:t}),0}}}const _t={key:0,class:"lake-simulation-panel"},At={class:"panel-header"},Dt={class:"panel-content"},It={class:"step-section"},Rt={class:"lake-selection"},Vt={class:"selection-info"},Ft={key:0,class:"selection-hint"},Ot={key:1,class:"selected-lake"},Tt={class:"step-section"},Ut={class:"pollution-source-selection"},Nt={class:"selection-info"},Et={key:0,class:"selection-hint"},Gt={key:1,class:"selection-hint"},jt={key:2,class:"selected-source"},Ht={class:"step-section"},Bt={class:"param-group"},qt=["value"],Jt={class:"param-group"},Wt={class:"param-group"},Kt={class:"step-section"},zt={class:"param-group"},Zt={class:"param-group"},Qt={class:"param-group"},Xt={class:"param-group"},Yt={class:"param-group"},$t={class:"step-section"},el={class:"param-group"},tl={class:"param-group"},ll={class:"param-group"},ol={class:"action-buttons"},nl=["disabled"],al=["disabled"],sl={key:0,class:"progress-section"},il={class:"progress"},rl={class:"progress-text"},cl={key:1,class:"time-control"},ul={class:"time-control-buttons"},dl={class:"speed-control"},vl={class:"speed-buttons"},ml=["max"],gl={class:"time-info"};function fl(n,e,k,t,R,_){return t.panelVisible?(x(),I("div",_t,[l("div",At,[e[27]||(e[27]=l("h3",null,"湖泊污染扩散模拟",-1)),l("button",{onClick:e[0]||(e[0]=(...o)=>t.togglePanel&&t.togglePanel(...o)),class:"close-btn"},"×")]),l("div",Dt,[l("div",It,[e[29]||(e[29]=l("h4",null,"1. 选择湖泊",-1)),l("div",Rt,[l("div",Vt,[t.selectedLake?(x(),I("p",Ot,[e[28]||(e[28]=ve(" ✅ 已选择: ",-1)),l("strong",null,F(t.selectedLakeName),1)])):(x(),I("p",Ft," 💡 请点击地图上的湖泊多边形来选择湖泊 "))]),t.selectedLake?(x(),I("button",{key:0,onClick:e[1]||(e[1]=(...o)=>t.clearLakeSelection&&t.clearLakeSelection(...o)),class:"clear-btn"}," 清除选择 ")):z("",!0)])]),l("div",Tt,[e[31]||(e[31]=l("h4",null,"2. 选择污染源位置",-1)),l("div",Ut,[l("div",Nt,[t.selectedLake?t.pollutionSourcePosition?(x(),I("p",jt,[e[30]||(e[30]=ve(" ✅ 污染源位置: ",-1)),l("strong",null,F(t.pollutionSourcePosition.lat.toFixed(6))+", "+F(t.pollutionSourcePosition.lng.toFixed(6)),1)])):(x(),I("p",Gt," 💡 请点击湖泊内的任意位置来设置污染源起始点 ")):(x(),I("p",Et," ⚠️ 请先选择湖泊 "))]),t.pollutionSourcePosition?(x(),I("button",{key:0,onClick:e[2]||(e[2]=(...o)=>t.clearPollutionSource&&t.clearPollutionSource(...o)),class:"clear-btn"}," 重新选择 ")):z("",!0)])]),l("div",Ht,[e[35]||(e[35]=l("h4",null,"3. 设置污染物参数",-1)),l("div",Bt,[e[32]||(e[32]=l("label",null,"污染物类型:",-1)),w(l("select",{"onUpdate:modelValue":e[3]||(e[3]=o=>t.pollutantType=o),onChange:e[4]||(e[4]=(...o)=>t.onPollutantChange&&t.onPollutantChange(...o)),class:"form-select"},[(x(!0),I(rt,null,ct(t.pollutantOptions,o=>(x(),I("option",{key:o.value,value:o.value},F(o.label),9,qt))),128))],544),[[it,t.pollutantType]])]),l("div",Jt,[e[33]||(e[33]=l("label",null,"污染物质量 (kg):",-1)),w(l("input",{type:"number","onUpdate:modelValue":e[5]||(e[5]=o=>t.pollutantMass=o),min:"0.1",max:"10000",step:"0.1",class:"form-input"},null,512),[[O,t.pollutantMass]])]),l("div",Wt,[e[34]||(e[34]=l("label",null,"衰减系数 (d⁻¹):",-1)),w(l("input",{type:"number","onUpdate:modelValue":e[6]||(e[6]=o=>t.decayRate=o),min:"0",max:"10",step:"0.001",class:"form-input"},null,512),[[O,t.decayRate]])])]),l("div",Kt,[e[41]||(e[41]=l("h4",null,"4. 设置湖泊参数",-1)),l("div",zt,[e[36]||(e[36]=l("label",null,"平均深度 (m):",-1)),w(l("input",{type:"number","onUpdate:modelValue":e[7]||(e[7]=o=>t.lakeDepth=o),min:"1",max:"100",step:"0.1",class:"form-input"},null,512),[[O,t.lakeDepth]])]),l("div",Zt,[e[37]||(e[37]=l("label",null,"纵向流速 (m/s):",-1)),w(l("input",{type:"number","onUpdate:modelValue":e[8]||(e[8]=o=>t.longitudinalVelocity=o),min:"0",max:"5",step:"0.01",class:"form-input"},null,512),[[O,t.longitudinalVelocity]])]),l("div",Qt,[e[38]||(e[38]=l("label",null,"横向流速 (m/s):",-1)),w(l("input",{type:"number","onUpdate:modelValue":e[9]||(e[9]=o=>t.transverseVelocity=o),min:"0",max:"5",step:"0.01",class:"form-input"},null,512),[[O,t.transverseVelocity]])]),l("div",Xt,[e[39]||(e[39]=l("label",null,"纵向弥散系数 (m²/s):",-1)),w(l("input",{type:"number","onUpdate:modelValue":e[10]||(e[10]=o=>t.longitudinalDiffusion=o),min:"0.1",max:"100",step:"0.1",class:"form-input"},null,512),[[O,t.longitudinalDiffusion]])]),l("div",Yt,[e[40]||(e[40]=l("label",null,"横向弥散系数 (m²/s):",-1)),w(l("input",{type:"number","onUpdate:modelValue":e[11]||(e[11]=o=>t.transverseDiffusion=o),min:"0.1",max:"100",step:"0.1",class:"form-input"},null,512),[[O,t.transverseDiffusion]])])]),l("div",$t,[e[45]||(e[45]=l("h4",null,"5. 设置模拟参数",-1)),l("div",el,[e[42]||(e[42]=l("label",null,"网格间距 (m):",-1)),w(l("input",{type:"number","onUpdate:modelValue":e[12]||(e[12]=o=>t.gridSpacing=o),min:"5",max:"100",step:"5",class:"form-input"},null,512),[[O,t.gridSpacing]])]),l("div",tl,[e[43]||(e[43]=l("label",null,"模拟时长 (小时):",-1)),w(l("input",{type:"number","onUpdate:modelValue":e[13]||(e[13]=o=>t.simulationHours=o),min:"0.5",max:"24",step:"0.5",class:"form-input"},null,512),[[O,t.simulationHours]])]),l("div",ll,[e[44]||(e[44]=l("label",null,"时间步长 (分钟):",-1)),w(l("input",{type:"number","onUpdate:modelValue":e[14]||(e[14]=o=>t.timeStep=o),min:"1",max:"60",step:"1",class:"form-input"},null,512),[[O,t.timeStep]])])]),l("div",ol,[l("button",{onClick:e[15]||(e[15]=(...o)=>t.generateGrid&&t.generateGrid(...o)),disabled:!t.selectedLake||!t.pollutionSourcePosition||t.gridLoading,class:"btn btn-primary"},F(t.gridLoading?"生成中...":"生成网格"),9,nl),l("button",{onClick:e[16]||(e[16]=(...o)=>t.startSimulation&&t.startSimulation(...o)),disabled:!t.gridGenerated||t.simulationLoading,class:"btn btn-success"},F(t.simulationLoading?"计算中...":"开始模拟"),9,al),l("button",{onClick:e[17]||(e[17]=(...o)=>t.clearSimulation&&t.clearSimulation(...o)),class:"btn btn-warning"},"清除模拟")]),t.gridLoading||t.simulationLoading?(x(),I("div",sl,[l("div",il,[l("div",{class:"progress-bar",style:ye({width:t.progressPercentage+"%"})},null,4)]),l("p",rl,F(t.progressText),1)])):z("",!0),t.simulationResult?(x(),I("div",cl,[e[46]||(e[46]=l("h4",null,"时间控制",-1)),l("div",ul,[l("button",{onClick:e[18]||(e[18]=(...o)=>t.togglePlayPause&&t.togglePlayPause(...o)),class:ie(["play-pause-btn",{playing:t.isPlaying}])},F(t.isPlaying?"⏸️ 暂停":"▶️ 播放"),3),l("button",{onClick:e[19]||(e[19]=(...o)=>t.resetAnimation&&t.resetAnimation(...o)),class:"reset-btn"},"🔄 重置")]),l("div",dl,[l("label",null,"播放速度: "+F(t.speedMultiplier.toFixed(1))+"x",1),l("div",vl,[l("button",{onClick:e[20]||(e[20]=o=>t.changeSpeed(.1)),class:ie(["speed-btn",{active:t.speedMultiplier===.1}])},"0.1x",2),l("button",{onClick:e[21]||(e[21]=o=>t.changeSpeed(.2)),class:ie(["speed-btn",{active:t.speedMultiplier===.2}])},"0.2x",2),l("button",{onClick:e[22]||(e[22]=o=>t.changeSpeed(.5)),class:ie(["speed-btn",{active:t.speedMultiplier===.5}])},"0.5x",2),l("button",{onClick:e[23]||(e[23]=o=>t.changeSpeed(1)),class:ie(["speed-btn",{active:t.speedMultiplier===1}])},"1.0x",2),l("button",{onClick:e[24]||(e[24]=o=>t.changeSpeed(2)),class:ie(["speed-btn",{active:t.speedMultiplier===2}])},"2.0x",2)])]),w(l("input",{type:"range","onUpdate:modelValue":e[25]||(e[25]=o=>t.currentTimeIndex=o),min:0,max:t.timeSteps.length-1,step:"1",onInput:e[26]||(e[26]=(...o)=>t.onTimeChange&&t.onTimeChange(...o)),class:"time-slider"},null,40,ml),[[O,t.currentTimeIndex]]),l("div",gl,[l("span",null,"当前时间: "+F(t.currentTimeDisplay),1),l("span",null,"最大浓度: "+F(t.maxConcentration.toFixed(6))+" mg/L",1)])])):z("",!0)])])):z("",!0)}const yl=Ee(wt,[["render",fl],["__scopeId","data-v-054c9b3f"]]);const pl={name:"RiverPollutionSimulation",props:{map:{type:Object,required:!0},"water-lines-layer":{type:Object,required:!0}},emits:["simulation-update"],setup(n,{emit:e}){const k=i(!0),t=i(null),R=nt(()=>{var u,L;return t.value?((u=t.value.properties)==null?void 0:u.name)||((L=t.value.properties)==null?void 0:L.NAME)||"未知河流":""}),_=i(null),o=i(null),P=i("organic"),V=i(100),d=i(.1),Q=i(50),X=i(3),ce=i(1.5),te=i(10),le=i(20),oe=i(6),ne=i(10),v=i(!1),ae=i(!1),me=i(!1),se=i(0),$=i(""),W=i(null),p=i([]),r=i(0),q=i(""),Y=i(0),E=i(!1),A=i(null),G=i(500),Z=i(.2),U=i(null),j=i(null),ee=i(null),ue=i(null),N=i(null),B=[{value:"organic",label:"有机污染物"},{value:"inorganic",label:"无机污染物"},{value:"heavy_metal",label:"重金属"},{value:"nutrient",label:"营养盐"},{value:"pesticide",label:"农药"}],ge=nt(()=>t.value&&_.value&&!ae.value),re=()=>{k.value=!k.value},Ge=()=>{n.map&&n.map._riverPollutionSourceClickHandler&&n.map.off("click",n.map._riverPollutionSourceClickHandler),t.value=null,ue.value=null,N.value=null,ee.value&&n.map.hasLayer(ee.value)&&n.map.removeLayer(ee.value),Ce(),De()},Ce=()=>{_.value=null,o.value&&(n.map.removeLayer(o.value),o.value=null)},je=u=>{if(n.map&&n.map._riverPollutionSourceClickHandler&&n.map.off("click",n.map._riverPollutionSourceClickHandler),t.value=u,N.value=u.geometry,console.log("选择河流:",u.properties),u.geometry.type==="LineString"){const L=u.geometry.coordinates;console.log("河流坐标数量:",L.length),console.log("河流坐标范围:",L.slice(0,3),"...",L.slice(-3));const a=L.map(h=>h[1]),s=L.map(h=>h[0]),m=Math.min(...a),c=Math.max(...a),S=Math.min(...s),g=Math.max(...s);console.log("坐标范围:",{minLat:m,maxLat:c,minLng:S,maxLng:g}),ue.value=T.latLngBounds([[m,S],[c,g]]),console.log("河流边界:",ue.value)}else console.error("河流几何类型不是LineString:",u.geometry.type);Ie(u),Ce(),De(),Re()},Ie=u=>{if(console.log("开始高亮河流:",u),ee.value&&n.map.hasLayer(ee.value)&&n.map.removeLayer(ee.value),ee.value=T.geoJSON(u,{style:{color:"#ff6b6b",weight:4,opacity:1,fillOpacity:0}}),n.map.addLayer(ee.value),console.log("河流高亮图层已添加"),ue.value){const L=ue.value;console.log("定位到河流边界:",L);const a=[50,50];n.map.fitBounds(L,{padding:a}),console.log("地图已定位到河流")}else console.error("河流边界为空，无法定位")},Re=()=>{console.log("设置河流污染源选择模式"),n.map._riverPollutionSourceClickHandler&&(console.log("移除之前的河流污染源事件监听器"),n.map.off("click",n.map._riverPollutionSourceClickHandler)),n.map._riverPollutionSourceClickHandler=u=>{console.log("地图被点击:",u.latlng);const L=u.latlng;t.value&&Ve(L,t.value.geometry)?(console.log("点击位置在河流附近，设置污染源"),He(L)):(console.log("点击位置距离河流太远"),alert("请点击河流附近的位置来设置污染源！"))},n.map.on("click",n.map._riverPollutionSourceClickHandler),console.log("河流污染源选择事件监听器已添加")},ke=(u,L)=>{if(L.type==="LineString"){const s=L.coordinates,m=50;let c=s;if(s.length>m){const g=Math.floor(s.length/m);c=[];for(let h=0;h<s.length;h+=g)c.push(s[h]);c[c.length-1]!==s[s.length-1]&&c.push(s[s.length-1])}let S=1/0;for(let g=0;g<c.length-1;g++){const h=c[g],f=c[g+1],C=Pe(u.lat,u.lng,h[1],h[0],f[1],f[0]);if(S=Math.min(S,C),S<.002*.3)break}return S<.002}return!1},Pe=(u,L,a,s,m,c)=>{const S=u-a,g=L-s,h=m-a,f=c-s,C=S*h+g*f,b=h*h+f*f;if(b===0)return Math.sqrt((u-a)*(u-a)+(L-s)*(L-s));let y=C/b,M,D;y<0?(M=a,D=s):y>1?(M=m,D=c):(M=a+y*h,D=s+y*f);const H=u-M,J=L-D;return Math.sqrt(H*H+J*J)},Ve=(u,L)=>{if(L.type==="LineString"){const s=L.coordinates,m=50;let c=s;if(s.length>m){const g=Math.floor(s.length/m);c=[];for(let h=0;h<s.length;h+=g)c.push(s[h]);c[c.length-1]!==s[s.length-1]&&c.push(s[s.length-1])}let S=1/0;for(let g=0;g<c.length-1;g++){const h=c[g],f=c[g+1],C=Pe(u.lat,u.lng,h[1],h[0],f[1],f[0]);if(S=Math.min(S,C),S<.005*.5)break}return S<.005}return!1},He=u=>{_.value=u,o.value&&n.map.removeLayer(o.value),o.value=T.circleMarker(u,{radius:8,fillColor:"#e74c3c",color:"#c0392b",weight:2,opacity:1,fillOpacity:.8}),o.value.bindPopup(`
        <strong>污染源位置</strong><br>
        纬度: ${u.lat.toFixed(6)}<br>
        经度: ${u.lng.toFixed(6)}
      `),n.map.addLayer(o.value),console.log("设置污染源位置:",u)},Fe=()=>{const L={organic:{mass:500,decay:.12},inorganic:{mass:300,decay:.06},heavy_metal:{mass:100,decay:.001},nutrient:{mass:800,decay:.3},pesticide:{mass:50,decay:.03}}[P.value];L&&(V.value=L.mass,d.value=L.decay)},fe=async()=>{if(!me.value){alert("请先生成网格");return}ae.value=!0,se.value=0,$.value="正在计算扩散...";try{console.log("开始创建一维河流扩散模型，参数:",{Ex:te.value,vx:ce.value,H:X.value,W:Q.value,K1:d.value/(24*3600),m:V.value*1e3});const u=new hl(te.value,ce.value,X.value,Q.value,d.value/(24*3600),V.value*1e3);console.log("河流扩散模型创建成功"),U.value&&n.map.hasLayer(U.value)&&(console.log("隐藏网格点图层"),n.map.removeLayer(U.value)),j.value=T.layerGroup(),n.map.addLayer(j.value);const L=oe.value*60,a=Math.floor(L/ne.value);p.value=[];for(let b=0;b<=a;b++)p.value.push(b*ne.value);const s=_.value.lat,m=_.value.lng,c=Le();let S=0;const g=N.value.coordinates;for(let b=0;b<g.length-1;b++){const y=g[b],M=g[b+1];if(Pe(s,m,y[1],y[0],M[1],M[0])<.001){let H=0;for(let Te=0;Te<b;Te++){const Xe=g[Te],Ye=g[Te+1],$e=Xe[1],mt=Xe[0],et=Ye[1],gt=Ye[0],ft=6371e3,tt=(et-$e)*Math.PI/180,lt=(gt-mt)*Math.PI/180,ot=Math.sin(tt/2)*Math.sin(tt/2)+Math.cos($e*Math.PI/180)*Math.cos(et*Math.PI/180)*Math.sin(lt/2)*Math.sin(lt/2),yt=2*Math.atan2(Math.sqrt(ot),Math.sqrt(1-ot));H+=ft*yt}const J=y[1],K=y[0],de=M[1],xe=M[0],ut=6371e3,Ke=(de-J)*Math.PI/180,ze=(xe-K)*Math.PI/180,Ze=Math.sin(Ke/2)*Math.sin(Ke/2)+Math.cos(J*Math.PI/180)*Math.cos(de*Math.PI/180)*Math.sin(ze/2)*Math.sin(ze/2),dt=2*Math.atan2(Math.sqrt(Ze),Math.sqrt(1-Ze)),Qe=ut*dt,vt=Pe(s,m,J,K,de,xe)/Qe;S=H+vt*Qe;break}}console.log("污染源在河流上的距离:",S,"米"),c.forEach(b=>{const y=b.distance-S;b.sourceDistance=y>=0?y:-1}),console.log("开始计算河流扩散，网格点数:",c.length,"时间步数:",p.value.length);const h=ue.value,f=.005,C=Math.max(1,Math.floor(p.value.length/50));for(let b=0;b<p.value.length;b+=C){const y=p.value[b]*60;b%(C*5)===0&&console.log(`计算进度: ${b}/${p.value.length}`);for(let M=0;M<c.length;M++)try{const D=c[M],H=D.sourceDistance;if(H<0||H>5e3){D.concentrations.push(0);continue}const J=u.calculate(y,H);D.concentrations.push(J)}catch(D){console.error(`计算网格点 ${M} 浓度时出错:`,D),point.concentrations.push(0)}se.value=Math.round((b+1)/p.value.length*100),b%(C*10)===0&&await new Promise(M=>setTimeout(M,10))}for(let b=0;b<p.value.length;b++)if(b%C!==0){const y=Math.floor(b/C)*C,M=Math.min(y+C,p.value.length-1);for(let D=0;D<c.length;D++){if(c[D].sourceDistance<0){c[D].concentrations[b]=0;continue}const J=c[D].concentrations[Math.floor(b/C)]||0,K=c[D].concentrations[Math.min(Math.floor(b/C)+1,c[D].concentrations.length-1)]||0,de=b%C/C,xe=J*(1-de)+K*de;c[D].concentrations[b]=xe}}W.value={gridPoints:c,timeSteps:p.value,maxConcentration:Math.max(...c.flatMap(b=>b.concentrations))},Y.value=W.value.maxConcentration,r.value=0,q.value=we(p.value[0]),Me(0),se.value=100,$.value="模拟计算完成",setTimeout(()=>{ae.value=!1},1e3)}catch(u){console.error("河流模拟计算失败:",u),alert("河流模拟计算失败"),ae.value=!1}},Me=u=>{if(!W.value)return;p.value[u];const L=W.value.gridPoints;j.value.clearLayers();const a=W.value.maxConcentration,s=m=>{if(m<=0)return"#ffffff";const c=m/a;return c<.2?"#4CAF50":c<.4?"#8BC34A":c<.6?"#FFC107":c<.8?"#FF9800":"#F44336"};L.forEach(m=>{const c=m.concentrations[u]||0;c>0&&m.sourceDistance>=0&&T.circleMarker([m.lat,m.lng],{radius:4,fillColor:s(c),color:s(c),weight:1,opacity:.8,fillOpacity:.7}).addTo(j.value).bindTooltip(`浓度: ${c.toFixed(6)} mg/L<br>距离污染源: ${m.sourceDistance.toFixed(0)}m`)})},Be=()=>{E.value?he():pe()},qe=u=>{Z.value=u,G.value=Math.round(100/u),E.value&&(he(),pe())},pe=()=>{!W.value||p.value.length===0||(E.value=!0,A.value=setInterval(()=>{r.value>=p.value.length-1?r.value=0:r.value++,q.value=we(p.value[r.value]),Me(r.value)},G.value))},he=()=>{E.value=!1,A.value&&(clearInterval(A.value),A.value=null)},be=()=>{he(),r.value=0,q.value=we(p.value[0]),Me(0)},Je=()=>{W.value&&(q.value=we(p.value[r.value]),Me(r.value))},we=u=>{const L=Math.floor(u/60),a=u%60;return`${L}小时${a}分钟`},Oe=async()=>{if(!N.value){alert("请先选择河流");return}console.log("开始生成河流网格，河流几何:",N.value),console.log("河流边界:",ue.value),v.value=!0,se.value=0,$.value="正在生成网格...";try{const u=Le();if(console.log("生成的网格点数量:",u.length),u.length===0){alert("未生成任何网格点，请检查河流几何数据"),v.value=!1;return}We(u),me.value=!0,se.value=100,$.value="网格生成完成",setTimeout(()=>{v.value=!1},1e3)}catch(u){console.error("生成网格失败:",u),alert("生成网格失败: "+u.message),v.value=!1}},Le=()=>{const u=[],L=N.value;if(console.log("生成一维河流网格点，河流几何:",L),L.type!=="LineString")return console.error("河流几何类型不是LineString"),u;const a=L.coordinates;console.log("河流坐标数量:",a.length);let s=0;const m=[0];for(let g=0;g<a.length-1;g++){const h=a[g],f=a[g+1],C=h[1],b=h[0],y=f[1],M=f[0],D=6371e3,H=(y-C)*Math.PI/180,J=(M-b)*Math.PI/180,K=Math.sin(H/2)*Math.sin(H/2)+Math.cos(C*Math.PI/180)*Math.cos(y*Math.PI/180)*Math.sin(J/2)*Math.sin(J/2),de=2*Math.atan2(Math.sqrt(K),Math.sqrt(1-K)),xe=D*de;s+=xe,m.push(s)}console.log("河流总长度:",s,"米");const c=Math.max(le.value,50),S=Math.floor(s/c)+1;console.log("网格间距:",c,"米，网格点数量:",S);for(let g=0;g<S;g++){const h=g*c;if(h>s)break;let f=0;for(let K=0;K<m.length-1;K++)if(h>=m[K]&&h<=m[K+1]){f=K;break}const C=m[f],b=m[f+1],y=(h-C)/(b-C),M=a[f],D=a[f+1],H=M[1]+(D[1]-M[1])*y,J=M[0]+(D[0]-M[0])*y;u.push({lat:H,lng:J,distance:h,segmentIndex:f,concentrations:[]})}return console.log(`一维河流网格生成完成: 网格点数量 ${u.length}`),u},We=u=>{U.value&&n.map.hasLayer(U.value)&&n.map.removeLayer(U.value),U.value=T.layerGroup(),u.forEach((L,a)=>{const s=T.latLng(L.lat,L.lng);if(ke(s,N.value)){const m=T.circleMarker([L.lat,L.lng],{radius:2,fillColor:"#4CAF50",color:"#4CAF50",weight:1,opacity:.8,fillOpacity:.6});m.bindPopup(`网格点 ${a+1}<br>坐标: ${L.lat.toFixed(6)}, ${L.lng.toFixed(6)}`),U.value.addLayer(m)}}),n.map.addLayer(U.value)},De=()=>{he(),U.value&&n.map.hasLayer(U.value)&&(n.map.removeLayer(U.value),U.value=null),j.value&&n.map.hasLayer(j.value)&&(n.map.removeLayer(j.value),j.value=null),me.value=!1,W.value=null,p.value=[],r.value=0,q.value="",Y.value=0};return pt(()=>{try{he(),o.value&&n.map&&n.map.removeLayer(o.value),U.value&&n.map&&n.map.removeLayer(U.value),j.value&&n.map&&n.map.removeLayer(j.value),ee.value&&n.map&&n.map.removeLayer(ee.value),n.map&&n.map._riverPollutionSourceClickHandler&&n.map.off("click",n.map._riverPollutionSourceClickHandler)}catch(u){console.error("清理河流模拟组件时出错:",u)}}),{panelVisible:k,selectedRiver:t,selectedRiverName:R,pollutionSourcePosition:_,pollutantType:P,pollutantMass:V,decayRate:d,riverWidth:Q,riverDepth:X,flowVelocity:ce,longitudinalDiffusion:te,gridSpacing:le,simulationHours:oe,timeStep:ne,gridLoading:v,simulationLoading:ae,gridGenerated:me,progressPercentage:se,progressText:$,simulationResult:W,timeSteps:p,currentTimeIndex:r,currentTimeDisplay:q,maxConcentration:Y,isPlaying:E,speedMultiplier:Z,pollutantOptions:B,canStartSimulation:ge,togglePanel:re,clearRiverSelection:Ge,clearPollutionSource:Ce,onRiverSelect:je,highlightSelectedRiver:Ie,setupPollutionSourceSelection:Re,isPointNearRiverForSelection:Ve,onPollutantChange:Fe,generateGrid:Oe,startSimulation:fe,clearSimulation:De,togglePlayPause:Be,resetAnimation:be,changeSpeed:qe,onTimeChange:Je}}};class hl{constructor(e,k,t,R,_,o){this.Ex=e,this.vx=k,this.H=t,this.W=R,this.K1=_,this.m=o,this.constant=o/(t*R*Math.sqrt(4*Math.PI*e))}calculate(e,k){if(e<=0||k<0)return 0;try{if(e<.001||this.Ex<=0)return 0;const t=this.vx*e;if(k<0||k>t+3*Math.sqrt(4*this.Ex*e))return 0;const R=this.constant/Math.sqrt(e),_=Math.pow(k-this.vx*e,2)/(4*this.Ex*e),P=Math.exp(-this.K1*e)*R*Math.exp(-_);if(isNaN(P)||!isFinite(P))return 0;const V=Math.round(P*1e6)/1e6;return V<1e-6?0:V}catch(t){return console.error("一维河流扩散计算出错:",t,{t:e,x:k}),0}}}const bl={key:0,class:"river-simulation-panel"},Ll={class:"panel-header"},Sl={class:"panel-content"},Cl={class:"step-section"},kl={class:"river-selection"},Pl={class:"selection-info"},Ml={key:0,class:"selection-hint"},wl={key:1,class:"selected-river"},xl={class:"step-section"},_l={class:"pollution-source-selection"},Al={class:"selection-info"},Dl={key:0,class:"selection-hint"},Il={key:1,class:"selection-hint"},Rl={key:2,class:"selected-source"},Vl={class:"step-section"},Fl={class:"param-group"},Ol=["value"],Tl={class:"param-group"},Ul={class:"param-group"},Nl={class:"step-section"},El={class:"param-group"},Gl={class:"param-group"},jl={class:"param-group"},Hl={class:"param-group"},Bl={class:"step-section"},ql={class:"param-group"},Jl={class:"param-group"},Wl={class:"param-group"},Kl={class:"action-buttons"},zl=["disabled"],Zl=["disabled"],Ql={key:0,class:"progress-section"},Xl={class:"progress"},Yl={class:"progress-text"},$l={key:1,class:"time-control"},eo={class:"time-control-buttons"},to={class:"speed-control"},lo={class:"speed-buttons"},oo=["max"],no={class:"time-info"},ao={key:2,class:"step-section"},so={class:"results-container"},io={class:"result-item"};function ro(n,e,k,t,R,_){var o,P,V,d,Q,X,ce,te,le,oe,ne;return t.panelVisible?(x(),I("div",bl,[l("div",Ll,[e[26]||(e[26]=l("h3",null,"河流污染扩散模拟",-1)),l("button",{onClick:e[0]||(e[0]=(...v)=>t.togglePanel&&t.togglePanel(...v)),class:"close-btn"},"×")]),l("div",Sl,[l("div",Cl,[e[28]||(e[28]=l("h4",null,"1. 选择河流",-1)),l("div",kl,[l("div",Pl,[t.selectedRiver?(x(),I("p",wl,[e[27]||(e[27]=ve(" ✅ 已选择: ",-1)),l("strong",null,F(t.selectedRiverName),1)])):(x(),I("p",Ml," 💡 请点击地图上的河流线条来选择河流 "))]),t.selectedRiver?(x(),I("button",{key:0,onClick:e[1]||(e[1]=(...v)=>t.clearRiverSelection&&t.clearRiverSelection(...v)),class:"clear-btn"}," 清除选择 ")):z("",!0)])]),l("div",xl,[e[30]||(e[30]=l("h4",null,"2. 选择污染源位置",-1)),l("div",_l,[l("div",Al,[t.selectedRiver?t.pollutionSourcePosition?(x(),I("p",Rl,[e[29]||(e[29]=ve(" ✅ 污染源位置: ",-1)),l("strong",null,F(((P=(o=t.pollutionSourcePosition)==null?void 0:o.lat)==null?void 0:P.toFixed(6))||"0.000000")+", "+F(((d=(V=t.pollutionSourcePosition)==null?void 0:V.lng)==null?void 0:d.toFixed(6))||"0.000000"),1)])):(x(),I("p",Il," 💡 请点击河流上的任意位置来设置污染源起始点 ")):(x(),I("p",Dl," ⚠️ 请先选择河流 "))]),t.pollutionSourcePosition?(x(),I("button",{key:0,onClick:e[2]||(e[2]=(...v)=>t.clearPollutionSource&&t.clearPollutionSource(...v)),class:"clear-btn"}," 重新选择 ")):z("",!0)])]),l("div",Vl,[e[34]||(e[34]=l("h4",null,"3. 设置污染物参数",-1)),l("div",Fl,[e[31]||(e[31]=l("label",null,"污染物类型:",-1)),w(l("select",{"onUpdate:modelValue":e[3]||(e[3]=v=>t.pollutantType=v),onChange:e[4]||(e[4]=(...v)=>t.onPollutantChange&&t.onPollutantChange(...v)),class:"form-select"},[(x(!0),I(rt,null,ct(t.pollutantOptions,v=>(x(),I("option",{key:v.value,value:v.value},F(v.label),9,Ol))),128))],544),[[it,t.pollutantType]])]),l("div",Tl,[e[32]||(e[32]=l("label",null,"污染物质量 (kg):",-1)),w(l("input",{type:"number","onUpdate:modelValue":e[5]||(e[5]=v=>t.pollutantMass=v),min:"0.1",max:"10000",step:"0.1",class:"form-input"},null,512),[[O,t.pollutantMass]])]),l("div",Ul,[e[33]||(e[33]=l("label",null,"衰减系数 (d⁻¹):",-1)),w(l("input",{type:"number","onUpdate:modelValue":e[6]||(e[6]=v=>t.decayRate=v),min:"0",max:"10",step:"0.001",class:"form-input"},null,512),[[O,t.decayRate]])])]),l("div",Nl,[e[39]||(e[39]=l("h4",null,"4. 设置河流参数",-1)),l("div",El,[e[35]||(e[35]=l("label",null,"河流宽度 (m):",-1)),w(l("input",{type:"number","onUpdate:modelValue":e[7]||(e[7]=v=>t.riverWidth=v),min:"1",max:"500",step:"1",class:"form-input"},null,512),[[O,t.riverWidth]])]),l("div",Gl,[e[36]||(e[36]=l("label",null,"河流深度 (m):",-1)),w(l("input",{type:"number","onUpdate:modelValue":e[8]||(e[8]=v=>t.riverDepth=v),min:"0.5",max:"20",step:"0.1",class:"form-input"},null,512),[[O,t.riverDepth]])]),l("div",jl,[e[37]||(e[37]=l("label",null,"流速 (m/s):",-1)),w(l("input",{type:"number","onUpdate:modelValue":e[9]||(e[9]=v=>t.flowVelocity=v),min:"0.1",max:"10",step:"0.1",class:"form-input"},null,512),[[O,t.flowVelocity]])]),l("div",Hl,[e[38]||(e[38]=l("label",null,"纵向弥散系数 (m²/s):",-1)),w(l("input",{type:"number","onUpdate:modelValue":e[10]||(e[10]=v=>t.longitudinalDiffusion=v),min:"0.1",max:"100",step:"0.1",class:"form-input"},null,512),[[O,t.longitudinalDiffusion]])])]),l("div",Bl,[e[43]||(e[43]=l("h4",null,"5. 设置模拟参数",-1)),l("div",ql,[e[40]||(e[40]=l("label",null,"网格间距 (m):",-1)),w(l("input",{type:"number","onUpdate:modelValue":e[11]||(e[11]=v=>t.gridSpacing=v),min:"5",max:"100",step:"5",class:"form-input"},null,512),[[O,t.gridSpacing]])]),l("div",Jl,[e[41]||(e[41]=l("label",null,"模拟时长 (小时):",-1)),w(l("input",{type:"number","onUpdate:modelValue":e[12]||(e[12]=v=>t.simulationHours=v),min:"0.5",max:"24",step:"0.5",class:"form-input"},null,512),[[O,t.simulationHours]])]),l("div",Wl,[e[42]||(e[42]=l("label",null,"时间步长 (分钟):",-1)),w(l("input",{type:"number","onUpdate:modelValue":e[13]||(e[13]=v=>t.timeStep=v),min:"1",max:"60",step:"1",class:"form-input"},null,512),[[O,t.timeStep]])])]),l("div",Kl,[l("button",{onClick:e[14]||(e[14]=(...v)=>t.generateGrid&&t.generateGrid(...v)),disabled:!t.selectedRiver||!t.pollutionSourcePosition||t.gridLoading,class:"btn btn-primary"},F(t.gridLoading?"生成中...":"生成网格"),9,zl),l("button",{onClick:e[15]||(e[15]=(...v)=>t.startSimulation&&t.startSimulation(...v)),disabled:!t.gridGenerated||t.simulationLoading,class:"btn btn-success"},F(t.simulationLoading?"计算中...":"开始模拟"),9,Zl),l("button",{onClick:e[16]||(e[16]=(...v)=>t.clearSimulation&&t.clearSimulation(...v)),class:"btn btn-warning"},"清除模拟")]),t.gridLoading||t.simulationLoading?(x(),I("div",Ql,[l("div",Xl,[l("div",{class:"progress-bar",style:ye({width:t.progressPercentage+"%"})},null,4)]),l("p",Yl,F(t.progressText),1)])):z("",!0),t.simulationResult?(x(),I("div",$l,[e[44]||(e[44]=l("h4",null,"时间控制",-1)),l("div",eo,[l("button",{onClick:e[17]||(e[17]=(...v)=>t.togglePlayPause&&t.togglePlayPause(...v)),class:ie(["play-pause-btn",{playing:t.isPlaying}])},F(t.isPlaying?"⏸️ 暂停":"▶️ 播放"),3),l("button",{onClick:e[18]||(e[18]=(...v)=>t.resetAnimation&&t.resetAnimation(...v)),class:"reset-btn"},"🔄 重置")]),l("div",to,[l("label",null,"播放速度: "+F(t.speedMultiplier.toFixed(1))+"x",1),l("div",lo,[l("button",{onClick:e[19]||(e[19]=v=>t.changeSpeed(.1)),class:ie(["speed-btn",{active:t.speedMultiplier===.1}])},"0.1x",2),l("button",{onClick:e[20]||(e[20]=v=>t.changeSpeed(.2)),class:ie(["speed-btn",{active:t.speedMultiplier===.2}])},"0.2x",2),l("button",{onClick:e[21]||(e[21]=v=>t.changeSpeed(.5)),class:ie(["speed-btn",{active:t.speedMultiplier===.5}])},"0.5x",2),l("button",{onClick:e[22]||(e[22]=v=>t.changeSpeed(1)),class:ie(["speed-btn",{active:t.speedMultiplier===1}])},"1.0x",2),l("button",{onClick:e[23]||(e[23]=v=>t.changeSpeed(2)),class:ie(["speed-btn",{active:t.speedMultiplier===2}])},"2.0x",2)])]),w(l("input",{type:"range","onUpdate:modelValue":e[24]||(e[24]=v=>t.currentTimeIndex=v),min:0,max:(((Q=t.timeSteps)==null?void 0:Q.length)||1)-1,step:"1",onInput:e[25]||(e[25]=(...v)=>t.onTimeChange&&t.onTimeChange(...v)),class:"time-slider"},null,40,oo),[[O,t.currentTimeIndex]]),l("div",no,[l("span",null,"当前时间: "+F(t.currentTimeDisplay),1),l("span",null,"最大浓度: "+F(t.maxConcentration.toFixed(6))+" mg/L",1)])])):z("",!0),t.simulationResult&&t.simulationResult.gridPoints?(x(),I("div",ao,[e[46]||(e[46]=l("h4",null,"模拟结果",-1)),l("div",so,[l("div",io,[e[45]||(e[45]=l("h5",null,"模拟完成",-1)),l("p",null,"网格点数: "+F(((ce=(X=t.simulationResult)==null?void 0:X.gridPoints)==null?void 0:ce.length)||0),1),l("p",null,"时间步数: "+F(((le=(te=t.simulationResult)==null?void 0:te.timeSteps)==null?void 0:le.length)||0),1),l("p",null,"最大浓度: "+F(((ne=(oe=t.simulationResult)==null?void 0:oe.maxConcentration)==null?void 0:ne.toFixed(6))||"0.000000")+" mg/L",1)])])])):z("",!0)])])):z("",!0)}const co=Ee(pl,[["render",ro],["__scopeId","data-v-da5628c6"]]);const uo={name:"WaterPollutionHeader",props:{title:{type:String,default:"水污染扩散模拟"}}},vo={class:"header"},mo={class:"header-content"},go={class:"logo-container"},fo={class:"title"},yo={class:"title-icons"};function po(n,e,k,t,R,_){const o=Ne("router-link");return x(),I("header",vo,[l("div",mo,[l("div",go,[Se(o,{to:"/",class:"back-button",title:"返回主页"},{default:_e(()=>e[0]||(e[0]=[l("img",{src:Mt,alt:"返回",width:"32",height:"32"},null,-1)])),_:1,__:[0]})]),l("h1",fo,F(k.title),1),l("div",yo,[Se(o,{to:"/map-editor",class:"action-icon",title:"电子地图编辑"},{default:_e(()=>e[1]||(e[1]=[l("img",{src:ht,alt:"电子地图编辑",width:"32",height:"32"},null,-1)])),_:1,__:[1]}),Se(o,{to:"/data-management",class:"action-icon",title:"数据管理"},{default:_e(()=>e[2]||(e[2]=[l("img",{src:bt,alt:"数据管理",width:"32",height:"32"},null,-1)])),_:1,__:[2]}),Se(o,{to:"/statistics-analysis",class:"action-icon",title:"统计分析"},{default:_e(()=>e[3]||(e[3]=[l("img",{src:Lt,alt:"统计分析",width:"32",height:"32"},null,-1)])),_:1,__:[3]}),Se(o,{to:"/prediction-simulation",class:"action-icon",title:"预测模拟"},{default:_e(()=>e[4]||(e[4]=[l("img",{src:St,alt:"预测模拟",width:"32",height:"32"},null,-1)])),_:1,__:[4]}),Se(o,{to:"/water-pollution-simulation",class:"action-icon",title:"水污染扩散模拟"},{default:_e(()=>e[5]||(e[5]=[l("img",{src:Ct,alt:"水污染扩散模拟",width:"32",height:"32"},null,-1)])),_:1,__:[5]})])])])}const ho=Ee(uo,[["render",po],["__scopeId","data-v-ac84bd58"]]);const bo={name:"WaterPollutionSimulation",components:{LakePollutionSimulation:yl,RiverPollutionSimulation:co,WaterPollutionHeader:ho},setup(){const n=i(null),e=i(!0),k=i(!1),t=i(!1),R=i("水污染扩散模拟"),_=Ue({districts:!0,waterLines:!0,waterAreas:!0,reservoirs:!0,settlements:!1,monitoringPoints:!0}),o=Ue({districts:"#b3e5fc",waterLines:"#64B5F6",waterAreas:"#29B6F6",reservoirs:"#26C6DA",settlements:"#FFF176",monitoringPoints:"#FF5722"}),P=Ue({districts:null,waterLines:null,waterAreas:null,reservoirs:null,settlements:null,monitoringPoints:null}),V=i(null),d=i(null),Q=()=>{try{t.value&&P.waterLines&&n.value?n.value.hasLayer(P.waterLines)&&(P.waterLines.bringToFront(),console.log("水系线图层已置顶")):k.value&&P.waterAreas&&n.value&&n.value.hasLayer(P.waterAreas)&&(P.waterAreas.bringToFront(),console.log("水系面图层已置顶"))}catch(p){console.error("管理图层层级时出错:",p)}},X=Ue({districts:0,waterLines:0,waterAreas:0,reservoirs:0,settlements:0,monitoringPoints:0}),ce=()=>{n.value=T.map("map",{zoomControl:!1,attributionControl:!1}).setView([39.9042,116.4074],10)},te=async()=>{try{const p={districts:"/Beijing-GeoJson/北京区县界.json",waterLines:"/Beijing-GeoJson/北京市_水系线数据.json",waterAreas:"/Beijing-GeoJson/北京市_水系面数据.json",reservoirs:"/Beijing-GeoJson/北京市水库.json",settlements:"/Beijing-GeoJson/居民地地名.json",monitoringPoints:"/Beijing-GeoJson/监测点.geojson"};for(const[r,q]of Object.entries(p))try{const E=await(await fetch(q)).json();let A=T.geoJSON(E,{style:le(r),onEachFeature:(G,Z)=>{G.properties&&Z.bindPopup(oe(r,G.properties)),r==="waterAreas"&&Z.on("click",U=>{if(console.log("点击湖泊:",G.properties),U.originalEvent.stopPropagation(),k.value&&V.value&&typeof V.value.onLakeSelect=="function")try{V.value.onLakeSelect(G)}catch(j){console.error("调用湖泊选择函数时出错:",j)}}),r==="waterLines"&&Z.on("click",U=>{if(console.log("点击河流:",G.properties),U.originalEvent.stopPropagation(),t.value&&d.value&&typeof d.value.onRiverSelect=="function")try{d.value.onRiverSelect(G)}catch(j){console.error("调用河流选择函数时出错:",j)}})}});r==="monitoringPoints"&&(A=T.geoJSON(E,{pointToLayer:(G,Z)=>T.circleMarker(Z,le(r)),onEachFeature:(G,Z)=>{G.properties&&Z.bindPopup(oe(r,G.properties))}})),P[r]=A,E.features&&(X[r]=E.features.length),_[r]&&(A.addTo(n.value),(r==="waterAreas"||r==="waterLines")&&A.bringToFront())}catch(Y){console.error(`加载${r}数据失败:`,Y)}e.value=!1}catch(p){console.error("加载数据失败:",p),e.value=!1}},le=p=>({districts:{fillColor:o.districts,weight:2.5,opacity:.8,color:o.districts,fillOpacity:.5,dashArray:"5, 8"},waterLines:{color:o.waterLines,weight:2.5,opacity:.9},waterAreas:{fillColor:o.waterAreas,weight:1.5,opacity:.9,color:"#0288D1",fillOpacity:.7},reservoirs:{fillColor:o.reservoirs,weight:1.5,opacity:.9,color:"#00ACC1",fillOpacity:.8},settlements:{radius:6,fillColor:o.settlements,color:"#ffffff",weight:1.5,opacity:1,fillOpacity:.9},monitoringPoints:{radius:8,fillColor:o.monitoringPoints,color:"#fff",weight:2,opacity:1,fillOpacity:.95}})[p]||{},oe=(p,r)=>({districts:`<strong>区县:</strong> ${r.name||r.NAME||"未知"}<br>
                   <strong>代码:</strong> ${r.code||r.CODE||r.adcode||"未知"}`,waterLines:`<strong>水系线:</strong> ${r.name||r.NAME||"未知"}<br>
                     <strong>类型:</strong> ${r.fclass||r.FCLASS||"未知"}`,waterAreas:`<strong>水系面:</strong> ${r.name||r.NAME||"未知"}<br>
                     <strong>类型:</strong> ${r.fclass||r.FCLASS||"未知"}<br>
                     <strong>OSM ID:</strong> ${r.osm_id||r.OSM_ID||"未知"}`,reservoirs:`<strong>水库:</strong> ${r.name||r.NAME||"未知"}<br>
                    <strong>类型:</strong> ${r.fclass||r.FCLASS||"未知"}<br>
                    <strong>OSM ID:</strong> ${r.osm_id||r.OSM_ID||"未知"}`,settlements:`<strong>居民地:</strong> ${r.name||r.NAME||"未知"}<br>
                      <strong>类型:</strong> ${r.fclass||r.FCLASS||"未知"}`,monitoringPoints:`<strong>监测点:</strong> ${r.name||r.NAME||"未知"}<br>
                          <strong>类型:</strong> ${r.fclass||r.FCLASS||"未知"}`})[p]||"无详细信息",ne=p=>{const r=P[p];r&&(_[p]?(r.addTo(n.value),p==="waterAreas"&&r.bringToFront()):n.value.removeLayer(r))},v=p=>{const r=document.querySelector(`input[data-layer="${p}"]`);r&&r.click()},ae=p=>{const r=P[p];if(r&&_[p]){const q=me(p);r.setStyle(q)}},me=p=>({districts:{fillColor:o.districts,weight:2.5,opacity:.8,color:o.districts,fillOpacity:.5,dashArray:"5, 8"},waterLines:{color:o.waterLines,weight:2.5,opacity:.9},waterAreas:{fillColor:o.waterAreas,weight:1.5,opacity:.9,color:"#0288D1",fillOpacity:.7},reservoirs:{fillColor:o.reservoirs,weight:1.5,opacity:.9,color:"#00ACC1",fillOpacity:.8},settlements:{radius:6,fillColor:o.settlements,color:"#ffffff",weight:1.5,opacity:1,fillOpacity:.9},monitoringPoints:{radius:8,fillColor:o.monitoringPoints,color:"#fff",weight:2,opacity:1,fillOpacity:.95}})[p]||{},se=p=>{console.log("湖泊模拟数据更新:",p)},$=p=>{console.log("河流模拟数据更新:",p)};st([t,k],()=>{setTimeout(()=>{try{Q()}catch(p){console.error("管理图层层级时出错:",p)}},100)});const W=()=>{t.value&&k.value&&(k.value=!1,console.log("关闭湖泊模拟，保持河流模拟独立"))};return kt(()=>{ce(),te()}),{loading:e,layers:_,layerObjects:P,map:n,dataStats:X,showLakeSimulation:k,showRiverSimulation:t,lakeSimulationRef:V,riverSimulationRef:d,systemTitle:R,toggleLayer:ne,manageLayerZIndex:Q,ensureSimulationIndependence:W,onSimulationUpdate:se,onRiverSimulationUpdate:$,layerColors:o,showColorPicker:v,updateLayerColor:ae}}},Lo={class:"container"},So={class:"map-container"},Co={class:"layer-control-panel"},ko={class:"layer-control"},Po={class:"layer-color-control"},Mo={class:"layer-control"},wo={class:"layer-color-control"},xo={class:"layer-control"},_o={class:"layer-color-control"},Ao={class:"layer-control"},Do={class:"layer-color-control"},Io={class:"layer-control"},Ro={class:"layer-color-control"},Vo={class:"layer-control"},Fo={class:"layer-color-control"},Oo={class:"simulation-panel"},To={key:0,class:"simulation-hint"},Uo={key:1,class:"simulation-hint"},No={key:2,class:"loading"};function Eo(n,e,k,t,R,_){const o=Ne("water-pollution-header"),P=Ne("LakePollutionSimulation"),V=Ne("RiverPollutionSimulation");return x(),I("div",Lo,[Se(o,{title:t.systemTitle},null,8,["title"]),l("div",So,[e[41]||(e[41]=l("div",{id:"map",style:{width:"100%",height:"100%"}},null,-1)),l("div",Co,[e[38]||(e[38]=l("h3",null,"图层控制",-1)),l("div",ko,[l("label",null,[w(l("input",{type:"checkbox","onUpdate:modelValue":e[0]||(e[0]=d=>t.layers.districts=d),onChange:e[1]||(e[1]=d=>t.toggleLayer("districts"))},null,544),[[Ae,t.layers.districts]]),e[32]||(e[32]=ve(" 区县边界 ",-1))]),l("div",Po,[l("div",{class:"color-preview",style:ye({backgroundColor:t.layerColors.districts}),onClick:e[2]||(e[2]=d=>t.showColorPicker("districts"))},null,4),w(l("input",{type:"color","onUpdate:modelValue":e[3]||(e[3]=d=>t.layerColors.districts=d),onChange:e[4]||(e[4]=d=>t.updateLayerColor("districts")),class:"color-input","data-layer":"districts"},null,544),[[O,t.layerColors.districts]])])]),l("div",Mo,[l("label",null,[w(l("input",{type:"checkbox","onUpdate:modelValue":e[5]||(e[5]=d=>t.layers.waterLines=d),onChange:e[6]||(e[6]=d=>t.toggleLayer("waterLines"))},null,544),[[Ae,t.layers.waterLines]]),e[33]||(e[33]=ve(" 水系线数据 ",-1))]),l("div",wo,[l("div",{class:"color-preview",style:ye({backgroundColor:t.layerColors.waterLines}),onClick:e[7]||(e[7]=d=>t.showColorPicker("waterLines"))},null,4),w(l("input",{type:"color","onUpdate:modelValue":e[8]||(e[8]=d=>t.layerColors.waterLines=d),onChange:e[9]||(e[9]=d=>t.updateLayerColor("waterLines")),class:"color-input","data-layer":"waterLines"},null,544),[[O,t.layerColors.waterLines]])])]),l("div",xo,[l("label",null,[w(l("input",{type:"checkbox","onUpdate:modelValue":e[10]||(e[10]=d=>t.layers.waterAreas=d),onChange:e[11]||(e[11]=d=>t.toggleLayer("waterAreas"))},null,544),[[Ae,t.layers.waterAreas]]),e[34]||(e[34]=ve(" 水系面数据 ",-1))]),l("div",_o,[l("div",{class:"color-preview",style:ye({backgroundColor:t.layerColors.waterAreas}),onClick:e[12]||(e[12]=d=>t.showColorPicker("waterAreas"))},null,4),w(l("input",{type:"color","onUpdate:modelValue":e[13]||(e[13]=d=>t.layerColors.waterAreas=d),onChange:e[14]||(e[14]=d=>t.updateLayerColor("waterAreas")),class:"color-input","data-layer":"waterAreas"},null,544),[[O,t.layerColors.waterAreas]])])]),l("div",Ao,[l("label",null,[w(l("input",{type:"checkbox","onUpdate:modelValue":e[15]||(e[15]=d=>t.layers.reservoirs=d),onChange:e[16]||(e[16]=d=>t.toggleLayer("reservoirs"))},null,544),[[Ae,t.layers.reservoirs]]),e[35]||(e[35]=ve(" 北京市水库面 ",-1))]),l("div",Do,[l("div",{class:"color-preview",style:ye({backgroundColor:t.layerColors.reservoirs}),onClick:e[17]||(e[17]=d=>t.showColorPicker("reservoirs"))},null,4),w(l("input",{type:"color","onUpdate:modelValue":e[18]||(e[18]=d=>t.layerColors.reservoirs=d),onChange:e[19]||(e[19]=d=>t.updateLayerColor("reservoirs")),class:"color-input","data-layer":"reservoirs"},null,544),[[O,t.layerColors.reservoirs]])])]),l("div",Io,[l("label",null,[w(l("input",{type:"checkbox","onUpdate:modelValue":e[20]||(e[20]=d=>t.layers.monitoringPoints=d),onChange:e[21]||(e[21]=d=>t.toggleLayer("monitoringPoints"))},null,544),[[Ae,t.layers.monitoringPoints]]),e[36]||(e[36]=ve(" 监测点 ",-1))]),l("div",Ro,[l("div",{class:"color-preview point-preview",style:ye({backgroundColor:t.layerColors.monitoringPoints}),onClick:e[22]||(e[22]=d=>t.showColorPicker("monitoringPoints"))},null,4),w(l("input",{type:"color","onUpdate:modelValue":e[23]||(e[23]=d=>t.layerColors.monitoringPoints=d),onChange:e[24]||(e[24]=d=>t.updateLayerColor("monitoringPoints")),class:"color-input","data-layer":"monitoringPoints"},null,544),[[O,t.layerColors.monitoringPoints]])])]),l("div",Vo,[l("label",null,[w(l("input",{type:"checkbox","onUpdate:modelValue":e[25]||(e[25]=d=>t.layers.settlements=d),onChange:e[26]||(e[26]=d=>t.toggleLayer("settlements"))},null,544),[[Ae,t.layers.settlements]]),e[37]||(e[37]=ve(" 居民地地名 ",-1))]),l("div",Fo,[l("div",{class:"color-preview point-preview",style:ye({backgroundColor:t.layerColors.settlements}),onClick:e[27]||(e[27]=d=>t.showColorPicker("settlements"))},null,4),w(l("input",{type:"color","onUpdate:modelValue":e[28]||(e[28]=d=>t.layerColors.settlements=d),onChange:e[29]||(e[29]=d=>t.updateLayerColor("settlements")),class:"color-input","data-layer":"settlements"},null,544),[[O,t.layerColors.settlements]])])])]),l("div",Oo,[e[39]||(e[39]=l("h4",null,"模拟功能",-1)),l("button",{onClick:e[30]||(e[30]=d=>t.showLakeSimulation=!t.showLakeSimulation),class:"simulation-btn"},F(t.showLakeSimulation?"隐藏":"显示")+"湖泊污染模拟 ",1),t.showLakeSimulation?(x(),I("p",To," 💡 点击地图上的湖泊多边形来选择要模拟的湖泊 ")):z("",!0),e[40]||(e[40]=l("div",{class:"simulation-divider"},null,-1)),l("button",{onClick:e[31]||(e[31]=d=>t.showRiverSimulation=!t.showRiverSimulation),class:"simulation-btn river-btn"},F(t.showRiverSimulation?"隐藏":"显示")+"河流污染模拟 ",1),t.showRiverSimulation?(x(),I("p",Uo," 💡 点击地图上的河流线条来选择要模拟的河流 ")):z("",!0)]),t.showLakeSimulation&&t.layers.waterAreas?(x(),at(P,{key:0,ref:"lakeSimulationRef",map:t.map,"water-areas-layer":t.layerObjects.waterAreas,onSimulationUpdate:t.onSimulationUpdate},null,8,["map","water-areas-layer","onSimulationUpdate"])):z("",!0),t.showRiverSimulation&&t.layers.waterLines?(x(),at(V,{key:1,ref:"riverSimulationRef",map:t.map,"water-lines-layer":t.layerObjects.waterLines,onSimulationUpdate:t.onRiverSimulationUpdate},null,8,["map","water-lines-layer","onSimulationUpdate"])):z("",!0),e[42]||(e[42]=Pt('<div class="pollution-legend" data-v-f0350866><h4 data-v-f0350866>污染物浓度图例</h4><div class="legend-items" data-v-f0350866><div class="legend-item" data-v-f0350866><div class="color-bar" style="background:linear-gradient(to right, #00ff00, #ffff00, #ff8000, #ff0000);" data-v-f0350866></div><div class="legend-labels" data-v-f0350866><span data-v-f0350866>低浓度</span><span data-v-f0350866>高浓度</span></div></div><div class="legend-scale" data-v-f0350866><div class="scale-item" data-v-f0350866><div class="scale-color" style="background-color:#00ff00;" data-v-f0350866></div><span data-v-f0350866>0-25%</span></div><div class="scale-item" data-v-f0350866><div class="scale-color" style="background-color:#ffff00;" data-v-f0350866></div><span data-v-f0350866>25-50%</span></div><div class="scale-item" data-v-f0350866><div class="scale-color" style="background-color:#ff8000;" data-v-f0350866></div><span data-v-f0350866>50-75%</span></div><div class="scale-item" data-v-f0350866><div class="scale-color" style="background-color:#ff0000;" data-v-f0350866></div><span data-v-f0350866>75-100%</span></div></div></div></div>',1)),t.loading?(x(),I("div",No," 正在加载地理数据... ")):z("",!0)])])}const Bo=Ee(bo,[["render",Eo],["__scopeId","data-v-f0350866"]]);export{Bo as default};
